// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	telegram "github.com/AlexanderTurok/telegram-beaty-bot/pkg"
	gomock "github.com/golang/mock/gomock"
)

// MockParticipant is a mock of Participant interface.
type MockParticipant struct {
	ctrl     *gomock.Controller
	recorder *MockParticipantMockRecorder
}

// MockParticipantMockRecorder is the mock recorder for MockParticipant.
type MockParticipantMockRecorder struct {
	mock *MockParticipant
}

// NewMockParticipant creates a new mock instance.
func NewMockParticipant(ctrl *gomock.Controller) *MockParticipant {
	mock := &MockParticipant{ctrl: ctrl}
	mock.recorder = &MockParticipantMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParticipant) EXPECT() *MockParticipantMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockParticipant) Delete(uuid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockParticipantMockRecorder) Delete(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockParticipant)(nil).Delete), uuid)
}

// DeleteCache mocks base method.
func (m *MockParticipant) DeleteCache(uuid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCache", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCache indicates an expected call of DeleteCache.
func (mr *MockParticipantMockRecorder) DeleteCache(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCache", reflect.TypeOf((*MockParticipant)(nil).DeleteCache), uuid)
}

// Get mocks base method.
func (m *MockParticipant) Get(uuid int64) (telegram.Participant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", uuid)
	ret0, _ := ret[0].(telegram.Participant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockParticipantMockRecorder) Get(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockParticipant)(nil).Get), uuid)
}

// GetCache mocks base method.
func (m *MockParticipant) GetCache(uuid int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCache", uuid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCache indicates an expected call of GetCache.
func (mr *MockParticipantMockRecorder) GetCache(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCache", reflect.TypeOf((*MockParticipant)(nil).GetCache), uuid)
}

// GetDescription mocks base method.
func (m *MockParticipant) GetDescription(uuid int64, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDescription", uuid, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDescription indicates an expected call of GetDescription.
func (mr *MockParticipantMockRecorder) GetDescription(uuid, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDescription", reflect.TypeOf((*MockParticipant)(nil).GetDescription), uuid, description)
}

// GetName mocks base method.
func (m *MockParticipant) GetName(uuid int64, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName", uuid, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockParticipantMockRecorder) GetName(uuid, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockParticipant)(nil).GetName), uuid, name)
}

// GetPhoto mocks base method.
func (m *MockParticipant) GetPhoto(uuid int64, photo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhoto", uuid, photo)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPhoto indicates an expected call of GetPhoto.
func (mr *MockParticipantMockRecorder) GetPhoto(uuid, photo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhoto", reflect.TypeOf((*MockParticipant)(nil).GetPhoto), uuid, photo)
}

// Register mocks base method.
func (m *MockParticipant) Register(uuid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockParticipantMockRecorder) Register(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockParticipant)(nil).Register), uuid)
}

// SetDescription mocks base method.
func (m *MockParticipant) SetDescription(uuid int64, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDescription", uuid, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDescription indicates an expected call of SetDescription.
func (mr *MockParticipantMockRecorder) SetDescription(uuid, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDescription", reflect.TypeOf((*MockParticipant)(nil).SetDescription), uuid, description)
}

// SetName mocks base method.
func (m *MockParticipant) SetName(uuid int64, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetName", uuid, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetName indicates an expected call of SetName.
func (mr *MockParticipantMockRecorder) SetName(uuid, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockParticipant)(nil).SetName), uuid, name)
}

// SetPhoto mocks base method.
func (m *MockParticipant) SetPhoto(uuid int64, photo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPhoto", uuid, photo)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPhoto indicates an expected call of SetPhoto.
func (mr *MockParticipantMockRecorder) SetPhoto(uuid, photo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPhoto", reflect.TypeOf((*MockParticipant)(nil).SetPhoto), uuid, photo)
}

// MockVoter is a mock of Voter interface.
type MockVoter struct {
	ctrl     *gomock.Controller
	recorder *MockVoterMockRecorder
}

// MockVoterMockRecorder is the mock recorder for MockVoter.
type MockVoterMockRecorder struct {
	mock *MockVoter
}

// NewMockVoter creates a new mock instance.
func NewMockVoter(ctrl *gomock.Controller) *MockVoter {
	mock := &MockVoter{ctrl: ctrl}
	mock.recorder = &MockVoterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVoter) EXPECT() *MockVoterMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVoter) Create(uuid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockVoterMockRecorder) Create(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVoter)(nil).Create), uuid)
}

// GetParticipant mocks base method.
func (m *MockVoter) GetParticipant(uuid int64) (telegram.Participant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParticipant", uuid)
	ret0, _ := ret[0].(telegram.Participant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParticipant indicates an expected call of GetParticipant.
func (mr *MockVoterMockRecorder) GetParticipant(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipant", reflect.TypeOf((*MockVoter)(nil).GetParticipant), uuid)
}

// LikeParticipant mocks base method.
func (m *MockVoter) LikeParticipant(uuid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeParticipant", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikeParticipant indicates an expected call of LikeParticipant.
func (mr *MockVoterMockRecorder) LikeParticipant(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeParticipant", reflect.TypeOf((*MockVoter)(nil).LikeParticipant), uuid)
}
